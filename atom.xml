<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Write down &amp; Think hard</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-29T02:18:40.593Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Deng Xinliang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GreenDao与Room对比以及Android SQLite API优化</title>
    <link href="http://yoursite.com/2018/03/29/Android-ORM/"/>
    <id>http://yoursite.com/2018/03/29/Android-ORM/</id>
    <published>2018-03-29T02:17:24.000Z</published>
    <updated>2018-03-29T02:18:40.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主流库"><a href="#主流库" class="headerlink" title="主流库"></a>主流库</h3><p>目前Android主流的ORM相关库可以分为两类，一类是我们熟知的基于SQLite并进行一系列封装和优化的框架，比如<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">GreenDao</a>、<a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="noopener">Room</a>、<a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="noopener">DBFlow</a>等；另一类是<a href="https://en.wikipedia.org/wiki/NoSQL" target="_blank" rel="noopener">NoSql</a>数据库（注意这一类是数据库，是SQLite的替代品），比如Realm。</p><h4 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h4><p>NoSql database也可以称为no relational database，即非关系型数据库。与关系型数据库不同，NoSql不存在复杂的关系模型，在数据库设计上更自然，没有了复杂的关系型模型，维护起来也更加容易。比如一篇博文中包含正文、评论等，关系型数据库在设计时会根据三范式，将正文和评论放到不同的表中，使用时需要进行联合查询。而面向文档的NoSql数据库可以将正文和评论都保存在一个文档中。在查询时，NoSql直接读取这一个文档即可，相比关系型数据库的多次查找会更快。而且NoSql更方便扩展，在分布式集群上，普通的关系型数据库的拆分与查询举步维艰（而且关系型数据库有数据量限制），而NoSql可以轻易地将不同的文档或者键值对保存在不同的服务器上，只需要使用合适的算法，查询也不是难事。</p><p>但是NoSql的缺点也同样明显。首先是难以实现复杂的查询。在关系型数据库中，我们往往可以轻易实现多表复杂联查，但是NoSql不支持联合查询，需要上层代码进行更多的处理，比如使用多次查询。其次是占用存储空间更多。运用关系型数据库三范式能够设计出精简巧妙的数据库，很好地降低数据冗余。但是NoSql则不然。比如上面提到的博文的例子，关系型数据库的“评论”表中只需要记录评论者的ID、评论文章ID、评论内容即可，至于评论者的详细信息，则由User表提供。但是在NoSql中，为了避免使用多次查询（因为多次查询需要上层代码进行更多处理），我们可能需要把博文中需要显示出来的评论者的信息——用户名、用户头像等——都保存在同一个文档中。这在一定程度上增加了存储空间的占用。试想，如果一个活跃用户评论了绝大多数的文章，那他的用户名和头像信息冗余就会非常严重。</p><p>在移动平台上，基于SQLite的ORM框架还有一个优势，就是引入之后不会对应用安装包体积产生明显的影响。基于以上对比，可以认为基于SQLite的ORM框架更加适合移动平台。</p><h4 id="SQLite-Based-ORMs的选择"><a href="#SQLite-Based-ORMs的选择" class="headerlink" title="SQLite Based ORMs的选择"></a>SQLite Based ORMs的选择</h4><p>一般选择以下两个：</p><ul><li>带头大哥 <a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">GreenDao</a></li><li>谷歌出品 <a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="noopener">Room</a></li></ul><p>直至目前，GreenDao都无疑是Android SQLite Based ORMs中的带头大哥，无论是Github Star数，还是各类博客中出现的次数，都稳居第一。而谷歌推出的持久化框架Room则有望与之齐平。</p><p>本文就选择这两个框架与传统SQLite API进行对比。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>分别从易用性和速度上进行对比。</p><h4 id="易用性对比"><a href="#易用性对比" class="headerlink" title="易用性对比"></a>易用性对比</h4><table><thead><tr><th style="text-align:left">GreenDao</th><th style="text-align:left">Room</th></tr></thead><tbody><tr><td style="text-align:left">开发者只需要规定Entity的属性即可</td><td style="text-align:left">需要规定Entity的属性，需要规定Dao接口</td></tr><tr><td style="text-align:left">每次更新Entity需要重新build以生成代码，大型项目build耗时会比较久</td><td style="text-align:left">更新Entity不需要重新build，因为使用的是Dao接口规定的方法，但是需要根据情况更新Dao接口</td></tr><tr><td style="text-align:left">只有进行复杂操作时才需要写SQL语句</td><td style="text-align:left">即使是进行简单的条件查询，也要写SQL语句</td></tr><tr><td style="text-align:left">有一定的学习成本，需要学习注解、查询、条件语句等API</td><td style="text-align:left">学习成本低，基本只需要掌握Room的注解即可</td></tr></tbody></table><p>很明显，如果熟悉SQL语句，那么Room会更容易上手，在开发中也相对更加便利。</p><h4 id="速度对比"><a href="#速度对比" class="headerlink" title="速度对比"></a>速度对比</h4><p>速度对比项有：</p><ul><li>插入数据 - 插入<code>1000</code>条<code>user</code>数据和<code>10000</code>条<code>message</code>数据</li><li>查询全部 - 查询所有(<code>10000</code>条)<code>message</code>数据</li></ul><p>使用每一个框架创建Disk Database，针对以上对比项分别测试50次并计时，结果取平均值，时间为ms。具体代码可以参考<a href="https://github.com/dxinl/android-orm-benchmark" target="_blank" rel="noopener">android-orm-benchmark</a>来实现，这里就不贴代码了。在HUAWEI Mate 10 Android 8.0.0上运行，得出结果如下：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">传统SQLite API</th><th style="text-align:center">GreenDao</th><th style="text-align:center">Room</th></tr></thead><tbody><tr><td style="text-align:center">插入数据</td><td style="text-align:center">5653</td><td style="text-align:center">2771</td><td style="text-align:center">1441</td></tr><tr><td style="text-align:center">查询全部</td><td style="text-align:center">611</td><td style="text-align:center">750</td><td style="text-align:center">411</td></tr></tbody></table><p>可以看出，<code>Room</code>在查询和写入上的速度超过了<code>传统SQLite API</code>和<code>GreenDao</code>，甚至<code>GreenDao</code>在查询速度上会比<code>传统SQLite API</code>慢。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><p>为什么<code>Room</code>和<code>GreenDao</code>在写入的速度上会比<code>传统SQLite API</code>快这么多？首先来看一下每次<code>传统SQLite API</code>在写入时执行的几个步骤：</p><ol><li>组装<code>ContentValues</code></li><li>拼接SQL语句</li><li>将<code>ContentValues</code>转换为数组</li><li>创建<code>SQLiteStatement</code></li><li>将<code>SQLiteStatement</code>与第3步的数组绑定</li><li>执行写入操作</li></ol><p>而<code>Room</code>只需要两步：</p><ol><li>将SQLiteStatement与要插入的数据绑定</li><li>执行写入操作</li></ol><p>这就是<code>Room</code>比<code>传统SQLite API</code>快的原因。通过缓存<code>SQLiteStatement</code>，避免了每写一行都需要重新拼接SQL语句、创建<code>SQLiteStatement</code>这些重复操作。同时，由于掌握了<code>SQLiteStatement</code>，可以直接绑定数据，不再需要依赖<code>ContentValues</code>，避免了组装和反组装的耗时。</p><p>而由于<code>GreenDao</code>会把要写入的对象缓存起来，如果已经缓存过就更新，以此来提高查询速度，所以会有更多的时间消耗。实际上，在<code>速度对比</code>这一节中，我们先清除了<code>GreenDao</code>的对象缓存再执行查询，因为缓存无法命中，需要使用Cursor生成对象。尽管<code>GreenDao</code>在遍历Cursor生成对象这一步有所优化，但是其对速度的提升幅度相对查询缓存来说是很小的，所以其速度会比<code>传统SQLite API</code>更慢。在上述测试代码中，如果不清除缓存，<code>GreenDao</code>查询速度会有2~3倍的提升（随着数据量的增加，这个提升会有所下降）。由于<code>GreenDao</code>的缓存对象与返回的查询结果是同一对象，因此需要特别注意，在开启缓存的情况下，如果直接修改查询出来的对象，而且没有及时同步到数据库中，那么就会导致下次查询结果错误与数据库不同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DaoSession session = mDaoMaster.newSession();</span><br><span class="line">Message msg = session.getMessageDao().queryBuilder()</span><br><span class="line">        .where(MessageDao.Properties.Id.eq(<span class="number">1</span>)).unique();;</span><br><span class="line">Log.e(<span class="string">"before"</span>, msg.toString());</span><br><span class="line"></span><br><span class="line">msg.content = <span class="string">"modified"</span>;</span><br><span class="line">Message message1 = session.getMessageDao().queryBuilder()</span><br><span class="line">        .where(MessageDao.Properties.Id.eq(msg.id)).unique();</span><br><span class="line">Log.e(<span class="string">"after"</span>, message1.toString());</span><br></pre></td></tr></table></figure><p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E/before: 1, JkJsHimdMNwLF9WWsJR8Vj5uea5uqPDlSzve2raGK6t0u6qwEZopLbi80KHDapqcEJiugixqHqUhhavmlOz9OGB2EnFAD3Mj9Qnt</span><br><span class="line">E/after: 1, modified</span><br></pre></td></tr></table></figure></p><p>考虑到部分项目可能会选择关闭这个功能（如果你的项目中确定要关闭<code>GreenDao</code>缓存，那么<code>Room</code>会是你更好的选择），因此测试代码选择每次执行数据库操作后，清除缓存。</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>同样地，<code>传统SQLite API</code>执行查询也需要每次都拼接SQL语句。而且在查询完成得到<code>Cursor</code>之后，我们在使用<code>传统SQLite API</code>生成对象时，一般会在循环体中进行列下标查询，即：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getColumnIndex every time</span></span><br><span class="line"><span class="keyword">while</span> (c != <span class="keyword">null</span> &amp;&amp; c.moveToNext()) &#123;</span><br><span class="line">    Message newMessage = <span class="keyword">new</span> Message();</span><br><span class="line">    newMessage.setChannelId(c.getLong(c</span><br><span class="line">            .getColumnIndex(Message.CHANNEL_ID)));</span><br><span class="line">    newMessage.setClientId(c.getLong(c</span><br><span class="line">            .getColumnIndex(Message.CLIENT_ID)));</span><br><span class="line">    newMessage.setCommandId(c.getLong(c</span><br><span class="line">            .getColumnIndex(Message.COMMAND_ID)));</span><br><span class="line">    newMessage.setContent(c.getString(c</span><br><span class="line">            .getColumnIndex(Message.CONTENT)));</span><br><span class="line">    newMessage.setCreatedAt(c.getInt(c</span><br><span class="line">            .getColumnIndex(Message.CREATED_AT)));</span><br><span class="line">    newMessage.setSenderId(c.getLong(c</span><br><span class="line">            .getColumnIndex(Message.SENDER_ID)));</span><br><span class="line">    newMessage.setSortedBy(c.getDouble(c</span><br><span class="line">            .getColumnIndex(Message.SORTED_BY)));</span><br><span class="line"></span><br><span class="line">    messages.add(newMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而<code>Room</code>只会查询一次下标：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code generated by Room</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfId = _cursor.getColumnIndexOrThrow(<span class="string">"_id"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfClientId = _cursor.getColumnIndexOrThrow(<span class="string">"client_id"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfCommandId = _cursor.getColumnIndexOrThrow(<span class="string">"command_id"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfSortedBy = _cursor.getColumnIndexOrThrow(<span class="string">"sorted_by"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfCreatedAt = _cursor.getColumnIndexOrThrow(<span class="string">"created_at"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfContent = _cursor.getColumnIndexOrThrow(<span class="string">"content"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfSenderId = _cursor.getColumnIndexOrThrow(<span class="string">"sender_id"</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> _cursorIndexOfChannelId = _cursor.getColumnIndexOrThrow(<span class="string">"channel_id"</span>);</span><br><span class="line"><span class="keyword">final</span> RoomMessage[] _result = <span class="keyword">new</span> RoomMessage[_cursor.getCount()];</span><br><span class="line"><span class="keyword">int</span> _index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(_cursor.moveToNext()) &#123;</span><br><span class="line">  <span class="keyword">final</span> RoomMessage _item;</span><br><span class="line">  _item = <span class="keyword">new</span> RoomMessage();</span><br><span class="line">  _item.id = _cursor.getLong(_cursorIndexOfId);</span><br><span class="line">  _item.clientId = _cursor.getLong(_cursorIndexOfClientId);</span><br><span class="line">  _item.commandId = _cursor.getLong(_cursorIndexOfCommandId);</span><br><span class="line">  _item.sortedBy = _cursor.getDouble(_cursorIndexOfSortedBy);</span><br><span class="line">  _item.createdAt = _cursor.getInt(_cursorIndexOfCreatedAt);</span><br><span class="line">  _item.content = _cursor.getString(_cursorIndexOfContent);</span><br><span class="line">  _item.senderId = _cursor.getLong(_cursorIndexOfSenderId);</span><br><span class="line">  _item.channelId = _cursor.getLong(_cursorIndexOfChannelId);</span><br><span class="line">  _result[_index] = _item;</span><br><span class="line">  _index ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _result;</span><br></pre></td></tr></table></figure></p><h3 id="SQLite-API优化"><a href="#SQLite-API优化" class="headerlink" title="SQLite API优化"></a>SQLite API优化</h3><p>其实通过上一节的分析，大家应该已经有了优化的思路。没错，就是照抄Room：</p><ol><li><p>自己生成和管理<code>SQLiteStatement</code>，杜绝ContentValues和拼接SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SQLiteStatement insertMessage = db.compileStatement(</span><br><span class="line">        String.format(<span class="string">"Insert into %s (%s, %s, %s, %s, %s, %s, %s) values (?,?,?,?,?,?,?)"</span>,</span><br><span class="line">            OptimizedMessage.TABLE_NAME,</span><br><span class="line">            OptimizedMessage.CONTENT,</span><br><span class="line">            OptimizedMessage.SORTED_BY,</span><br><span class="line">            OptimizedMessage.CLIENT_ID,</span><br><span class="line">            OptimizedMessage.SENDER_ID,</span><br><span class="line">            OptimizedMessage.CHANNEL_ID,</span><br><span class="line">            OptimizedMessage.COMMAND_ID,</span><br><span class="line">            OptimizedMessage.CREATED_AT ));</span><br></pre></td></tr></table></figure></li><li><p>在遍历Cursor前获取列下标，而不是在循环体中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do these things outside the while syntax</span></span><br><span class="line"><span class="keyword">int</span> channelIdIndex = c.getColumnIndex(OptimizedMessage.CHANNEL_ID);</span><br><span class="line"><span class="keyword">int</span> clientIdIndex = c.getColumnIndex(OptimizedMessage.CLIENT_ID);</span><br><span class="line"><span class="keyword">int</span> commandIdIndex = c.getColumnIndex(OptimizedMessage.COMMAND_ID);</span><br><span class="line"><span class="keyword">int</span> contentIndex = c.getColumnIndex(OptimizedMessage.CONTENT);</span><br><span class="line"><span class="keyword">int</span> createdAtIndex = c.getColumnIndex(OptimizedMessage.CREATED_AT);</span><br><span class="line"><span class="keyword">int</span> senderIdIndex = c.getColumnIndex(OptimizedMessage.SENDER_ID);</span><br><span class="line"><span class="keyword">int</span> sortedByIndex = c.getColumnIndex(OptimizedMessage.SORTED_BY);</span><br></pre></td></tr></table></figure></li></ol><p>以上两点就是通过对比<code>Room</code>得出的优化方案，应用到测试代码中之后，写入和查询速度有了明显的提升：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">优化前</th><th style="text-align:center">优化后</th><th style="text-align:center">GreenDao</th><th style="text-align:center">Room</th></tr></thead><tbody><tr><td style="text-align:center">写入</td><td style="text-align:center">5653</td><td style="text-align:center">1865</td><td style="text-align:center">2771</td><td style="text-align:center">1441</td></tr><tr><td style="text-align:center">查询</td><td style="text-align:center">611</td><td style="text-align:center">536</td><td style="text-align:center">750</td><td style="text-align:center">411</td></tr></tbody></table><p>除了上述借鉴<code>Room</code>和<code>GreenDao</code>的优化之外，还有一些基本知识，比如“在同一个事务中完成多行写入操作，而不是每写入一行都开启一个事务”等，也可以大大提升写入（查询）速度。优化无处不在，借鉴优秀的第三方框架，能够快速地学习如何写好代码。而扎实的基础是一切优化的前提。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主流库&quot;&gt;&lt;a href=&quot;#主流库&quot; class=&quot;headerlink&quot; title=&quot;主流库&quot;&gt;&lt;/a&gt;主流库&lt;/h3&gt;&lt;p&gt;目前Android主流的ORM相关库可以分为两类，一类是我们熟知的基于SQLite并进行一系列封装和优化的框架，比如&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
</feed>
